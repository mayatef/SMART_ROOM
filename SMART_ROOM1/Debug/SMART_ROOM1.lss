
SMART_ROOM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000023d4  00002468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00002472  2**0
                  ALLOC
  3 .stab         00002670  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a7e  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006562  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000845b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009346  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 11 	call	0x2244	; 0x2244 <main>
      8a:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_Init>:
#include "UART.h"
#define BAUD_PRESCALE ((F_CPU / (UART_BAUDRATE * 8UL))-1)
void USART_Init (void)					// Function to initialize the UART
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X); // Enable Double speed mode
     b4e:	eb e2       	ldi	r30, 0x2B	; 43
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	80 83       	st	Z, r24
	 * Disable for UDR empty register interrupt
	 * RXB8 & TXB not Used
	 * Enable receiver (RXEN = 1)
	 * Enable Transmitter (TXEN = 1)
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	80 83       	st	Z, r24
	 * USBS = 0 for 1 stop bit
	 * UCSZ1:0 = 1 (8-Bit data length)
	 * UCPOL = 0  (Used with Synchronous mode Only)
	 */

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     b5e:	e0 e4       	ldi	r30, 0x40	; 64
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	86 e8       	ldi	r24, 0x86	; 134
     b64:	80 83       	st	Z, r24

	// Set value of UBRR register with the baud rate (9600)
	UBRRH = BAUD_PRESCALE >> 8;
     b66:	e0 e4       	ldi	r30, 0x40	; 64
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     b6c:	e9 e2       	ldi	r30, 0x29	; 41
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8f ec       	ldi	r24, 0xCF	; 207
     b72:	80 83       	st	Z, r24

}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <USART_sendByte>:

void USART_sendByte (u8 data)			// Function for sending data byte
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA,UDRE));	//Polling until UDR register is empty and ready to accept data
     b86:	eb e2       	ldi	r30, 0x2B	; 43
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	80 72       	andi	r24, 0x20	; 32
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	b9 f3       	breq	.-18     	; 0xb86 <USART_sendByte+0xc>
	UDR = data;					     	//move the data to UDR register
     b98:	ec e2       	ldi	r30, 0x2C	; 44
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	80 83       	st	Z, r24


}
     ba0:	0f 90       	pop	r0
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <USART_receiveByte>:

u8 USART_receiveByte (void)				// Function for receiving data byte
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA,RXC));	//Polling until UDR register is full with data
     bb0:	eb e2       	ldi	r30, 0x2B	; 43
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	dc f7       	brge	.-10     	; 0xbb0 <USART_receiveByte+0x8>
	return UDR;							// Return the data from UDR register
     bba:	ec e2       	ldi	r30, 0x2C	; 44
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <USART_sendString>:

void USART_sendString (const u8 *str)	// Function for sending string
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <USART_sendString+0x6>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9b 83       	std	Y+3, r25	; 0x03
     bd4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     bd6:	19 82       	std	Y+1, r1	; 0x01
     bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <USART_sendString+0x30>

	while (str[i] != '\0')
	{
		USART_sendByte(str[i]);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	9b 81       	ldd	r25, Y+3	; 0x03
     be4:	fc 01       	movw	r30, r24
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	80 81       	ld	r24, Z
     bec:	0e 94 bd 05 	call	0xb7a	; 0xb7a <USART_sendByte>
		i++;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	89 83       	std	Y+1, r24	; 0x01

void USART_sendString (const u8 *str)	// Function for sending string
{
	u8 i = 0;

	while (str[i] != '\0')
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03
     c00:	fc 01       	movw	r30, r24
     c02:	e2 0f       	add	r30, r18
     c04:	f3 1f       	adc	r31, r19
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	39 f7       	brne	.-50     	; 0xbda <USART_sendString+0x14>
	{
		USART_sendByte(str[i]);
		i++;
	}
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <USART_receiveString>:

void USART_receiveString (u8 *str)		// Function for receiving string
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <USART_receiveString+0xa>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
     c2c:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	8c 01       	movw	r16, r24
     c3a:	02 0f       	add	r16, r18
     c3c:	13 1f       	adc	r17, r19
     c3e:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
     c42:	f8 01       	movw	r30, r16
     c44:	80 83       	st	Z, r24
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <USART_receiveString+0x4e>
	while (str[i] != "#")
	{
		i++;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
		str[i] =USART_receiveByte();
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	8c 01       	movw	r16, r24
     c5a:	02 0f       	add	r16, r18
     c5c:	13 1f       	adc	r17, r19
     c5e:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
     c62:	f8 01       	movw	r30, r16
     c64:	80 83       	st	Z, r24
void USART_receiveString (u8 *str)		// Function for receiving string
{

	u8 i = 0;
	str[i] = USART_receiveByte();
	while (str[i] != "#")
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	80 81       	ld	r24, Z
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 36       	cpi	r24, 0x60	; 96
     c80:	9f 07       	cpc	r25, r31
     c82:	11 f7       	brne	.-60     	; 0xc48 <USART_receiveString+0x30>
	{
		i++;
		str[i] =USART_receiveByte();
	}
	str[i] = '\0';
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	9b 81       	ldd	r25, Y+3	; 0x03
     c8e:	fc 01       	movw	r30, r24
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	10 82       	st	Z, r1
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <__vector_6>:
/*Define global variable*/
static volatile void (*g_CallBackPtr)(void) = NULL_Ptr;

/*Function Interrupt*/
ISR (TIMER1_CAPT_vect)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	if (*g_CallBackPtr != NULL_Ptr)
     cd0:	80 91 6a 00 	lds	r24, 0x006A
     cd4:	90 91 6b 00 	lds	r25, 0x006B
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	29 f0       	breq	.+10     	; 0xce6 <__vector_6+0x40>
	(*g_CallBackPtr)();
     cdc:	e0 91 6a 00 	lds	r30, 0x006A
     ce0:	f0 91 6b 00 	lds	r31, 0x006B
     ce4:	09 95       	icall
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <ICU_Init>:

/*Function Definition*/

void ICU_Init (ICU_Config_t *config_ptr)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <ICU_Init+0x6>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	9a 83       	std	Y+2, r25	; 0x02
     d18:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTD,6);										// clear ICU pin as i/p Pin
     d1a:	a2 e3       	ldi	r26, 0x32	; 50
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e2 e3       	ldi	r30, 0x32	; 50
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7b       	andi	r24, 0xBF	; 191
     d26:	8c 93       	st	X, r24
	TCCR1A = (1<<FOC1A) | (1<<FOC1A);						// Set Timer1 with normal mode & Start Counting
     d28:	ef e4       	ldi	r30, 0x4F	; 79
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	88 e0       	ldi	r24, 0x08	; 8
     d2e:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (config_ptr -> clock);		// Set Prescaler according to the passed prescaler
     d30:	ae e4       	ldi	r26, 0x4E	; 78
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ee e4       	ldi	r30, 0x4E	; 78
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	98 2f       	mov	r25, r24
     d3c:	98 7f       	andi	r25, 0xF8	; 248
     d3e:	e9 81       	ldd	r30, Y+1	; 0x01
     d40:	fa 81       	ldd	r31, Y+2	; 0x02
     d42:	81 81       	ldd	r24, Z+1	; 0x01
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((config_ptr -> edge)<<6);	// Set the Edge according to the passed edge
     d48:	ae e4       	ldi	r26, 0x4E	; 78
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ee e4       	ldi	r30, 0x4E	; 78
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	28 2f       	mov	r18, r24
     d54:	2f 7b       	andi	r18, 0xBF	; 191
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	80 81       	ld	r24, Z
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	00 24       	eor	r0, r0
     d62:	96 95       	lsr	r25
     d64:	87 95       	ror	r24
     d66:	07 94       	ror	r0
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	07 94       	ror	r0
     d6e:	98 2f       	mov	r25, r24
     d70:	80 2d       	mov	r24, r0
     d72:	82 2b       	or	r24, r18
     d74:	8c 93       	st	X, r24
	TCNT1 = 0;												// Initialize Timer/Counter register with value 0
     d76:	ec e4       	ldi	r30, 0x4C	; 76
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	11 82       	std	Z+1, r1	; 0x01
     d7c:	10 82       	st	Z, r1
	ICR1 = 0;												// Initialize ICR register with value 0
     d7e:	e6 e4       	ldi	r30, 0x46	; 70
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	11 82       	std	Z+1, r1	; 0x01
     d84:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);									//Enable ICU interrupt at Timer1
     d86:	a9 e5       	ldi	r26, 0x59	; 89
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e9 e5       	ldi	r30, 0x59	; 89
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	8c 93       	st	X, r24
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <ICU_SelectEdge>:
void ICU_SelectEdge (ICU_Edge_t edge)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((edge)<<6);	 // Set the Edge according to the passed edge
     daa:	ae e4       	ldi	r26, 0x4E	; 78
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ee e4       	ldi	r30, 0x4E	; 78
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	28 2f       	mov	r18, r24
     db6:	2f 7b       	andi	r18, 0xBF	; 191
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	00 24       	eor	r0, r0
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	07 94       	ror	r0
     dc6:	96 95       	lsr	r25
     dc8:	87 95       	ror	r24
     dca:	07 94       	ror	r0
     dcc:	98 2f       	mov	r25, r24
     dce:	80 2d       	mov	r24, r0
     dd0:	82 2b       	or	r24, r18
     dd2:	8c 93       	st	X, r24
}
     dd4:	0f 90       	pop	r0
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <ICU_GetInputCaptureValue>:
u16 ICU_GetInputCaptureValue (void)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	return ICR1;	// Return the value of ICR1
     de4:	e6 e4       	ldi	r30, 0x46	; 70
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
}
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <ICU_ClearTimerValue>:
void ICU_ClearTimerValue (void) // Clear Timer
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;	//Counter register
     dfa:	ec e4       	ldi	r30, 0x4C	; 76
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	11 82       	std	Z+1, r1	; 0x01
     e00:	10 82       	st	Z, r1
}
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <ICU_SetCallBack>:
void ICU_SetCallBack (void (*ptr2func)(void))
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <ICU_SetCallBack+0x6>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = ptr2func;	// Assign the address of the passed function to the global pointer function
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	90 93 6b 00 	sts	0x006B, r25
     e1e:	80 93 6a 00 	sts	0x006A, r24
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <ICU_deInit>:
void ICU_deInit (void)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1A,FOC1A);	// Stop the counter and de-initialize the Timer
     e34:	af e4       	ldi	r26, 0x4F	; 79
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ef e4       	ldi	r30, 0x4F	; 79
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,FOC1B);
     e42:	ae e4       	ldi	r26, 0x4E	; 78
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ee e4       	ldi	r30, 0x4E	; 78
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8b 7f       	andi	r24, 0xFB	; 251
     e4e:	8c 93       	st	X, r24
	TCNT1 = 0;					// Initialize Timer/Counter register with value 0
     e50:	ec e4       	ldi	r30, 0x4C	; 76
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	11 82       	std	Z+1, r1	; 0x01
     e56:	10 82       	st	Z, r1
	ICR1 = 0;					// Initialize ICR register with value 0
     e58:	e6 e4       	ldi	r30, 0x46	; 70
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TICIE1);	// Disable ICU interrupt for Timer1
     e60:	a9 e5       	ldi	r26, 0x59	; 89
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e9 e5       	ldi	r30, 0x59	; 89
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <Set_PinDir>:
/*Function Definition*/

//	For specific Bit

void Set_PinDir (GroupName_t group, PIN_NO_t number, PinDir_t direction)	// Function to set direction of specific bit
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	27 97       	sbiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == OUTPUT)
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <Set_PinDir+0x22>
     e94:	6f c0       	rjmp	.+222    	; 0xf74 <Set_PinDir+0x100>
	{
		switch (group)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3f 83       	std	Y+7, r19	; 0x07
     e9e:	2e 83       	std	Y+6, r18	; 0x06
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
     ea2:	9f 81       	ldd	r25, Y+7	; 0x07
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	49 f1       	breq	.+82     	; 0xefc <Set_PinDir+0x88>
     eaa:	2e 81       	ldd	r18, Y+6	; 0x06
     eac:	3f 81       	ldd	r19, Y+7	; 0x07
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <Set_PinDir+0x4a>
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	61 f0       	breq	.+24     	; 0xed4 <Set_PinDir+0x60>
     ebc:	ce c0       	rjmp	.+412    	; 0x105a <Set_PinDir+0x1e6>
     ebe:	2e 81       	ldd	r18, Y+6	; 0x06
     ec0:	3f 81       	ldd	r19, Y+7	; 0x07
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	71 f1       	breq	.+92     	; 0xf24 <Set_PinDir+0xb0>
     ec8:	8e 81       	ldd	r24, Y+6	; 0x06
     eca:	9f 81       	ldd	r25, Y+7	; 0x07
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	91 05       	cpc	r25, r1
     ed0:	e9 f1       	breq	.+122    	; 0xf4c <Set_PinDir+0xd8>
     ed2:	c3 c0       	rjmp	.+390    	; 0x105a <Set_PinDir+0x1e6>
		{
		case PORT_A:
			SET_BIT(DDRA,number);
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e3       	ldi	r30, 0x3A	; 58
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <Set_PinDir+0x7e>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <Set_PinDir+0x7a>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	af c0       	rjmp	.+350    	; 0x105a <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			SET_BIT(DDRB,number);
     efc:	a7 e3       	ldi	r26, 0x37	; 55
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e7 e3       	ldi	r30, 0x37	; 55
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <Set_PinDir+0xa6>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <Set_PinDir+0xa2>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	9b c0       	rjmp	.+310    	; 0x105a <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			SET_BIT(DDRC,number);
     f24:	a4 e3       	ldi	r26, 0x34	; 52
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e4 e3       	ldi	r30, 0x34	; 52
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <Set_PinDir+0xce>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <Set_PinDir+0xca>
     f46:	84 2b       	or	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	87 c0       	rjmp	.+270    	; 0x105a <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			SET_BIT(DDRD,number);
     f4c:	a1 e3       	ldi	r26, 0x31	; 49
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e1 e3       	ldi	r30, 0x31	; 49
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <Set_PinDir+0xf6>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <Set_PinDir+0xf2>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	73 c0       	rjmp	.+230    	; 0x105a <Set_PinDir+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3d 83       	std	Y+5, r19	; 0x05
     f7c:	2c 83       	std	Y+4, r18	; 0x04
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	59 f1       	breq	.+86     	; 0xfde <Set_PinDir+0x16a>
     f88:	2c 81       	ldd	r18, Y+4	; 0x04
     f8a:	3d 81       	ldd	r19, Y+5	; 0x05
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	2c f4       	brge	.+10     	; 0xf9c <Set_PinDir+0x128>
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f0       	breq	.+26     	; 0xfb4 <Set_PinDir+0x140>
     f9a:	5f c0       	rjmp	.+190    	; 0x105a <Set_PinDir+0x1e6>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	89 f1       	breq	.+98     	; 0x1008 <Set_PinDir+0x194>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <Set_PinDir+0x13e>
     fb0:	40 c0       	rjmp	.+128    	; 0x1032 <Set_PinDir+0x1be>
     fb2:	53 c0       	rjmp	.+166    	; 0x105a <Set_PinDir+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(DDRA,number);
     fb4:	aa e3       	ldi	r26, 0x3A	; 58
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ea e3       	ldi	r30, 0x3A	; 58
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <Set_PinDir+0x15e>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <Set_PinDir+0x15a>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	3e c0       	rjmp	.+124    	; 0x105a <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB,number);
     fde:	a7 e3       	ldi	r26, 0x37	; 55
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e3       	ldi	r30, 0x37	; 55
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <Set_PinDir+0x188>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <Set_PinDir+0x184>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	29 c0       	rjmp	.+82     	; 0x105a <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC,number);
    1008:	a4 e3       	ldi	r26, 0x34	; 52
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e4 e3       	ldi	r30, 0x34	; 52
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <Set_PinDir+0x1b2>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <Set_PinDir+0x1ae>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	14 c0       	rjmp	.+40     	; 0x105a <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD,number);
    1032:	a1 e3       	ldi	r26, 0x31	; 49
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e1 e3       	ldi	r30, 0x31	; 49
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <Set_PinDir+0x1dc>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <Set_PinDir+0x1d8>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
			break;
		}
	}
}
    105a:	27 96       	adiw	r28, 0x07	; 7
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Set_PinLevel>:

void Set_PinLevel (GroupName_t group, PIN_NO_t number, PinLevel_t level )	// Function to set level of specific bit
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	27 97       	sbiw	r28, 0x07	; 7
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	6a 83       	std	Y+2, r22	; 0x02
    1084:	4b 83       	std	Y+3, r20	; 0x03
	if (level == HIGH)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	09 f0       	breq	.+2      	; 0x108e <Set_PinLevel+0x22>
    108c:	6f c0       	rjmp	.+222    	; 0x116c <Set_PinLevel+0x100>
	{
		switch (group)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3f 83       	std	Y+7, r19	; 0x07
    1096:	2e 83       	std	Y+6, r18	; 0x06
    1098:	8e 81       	ldd	r24, Y+6	; 0x06
    109a:	9f 81       	ldd	r25, Y+7	; 0x07
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	49 f1       	breq	.+82     	; 0x10f4 <Set_PinLevel+0x88>
    10a2:	2e 81       	ldd	r18, Y+6	; 0x06
    10a4:	3f 81       	ldd	r19, Y+7	; 0x07
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <Set_PinLevel+0x4a>
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	61 f0       	breq	.+24     	; 0x10cc <Set_PinLevel+0x60>
    10b4:	ce c0       	rjmp	.+412    	; 0x1252 <Set_PinLevel+0x1e6>
    10b6:	2e 81       	ldd	r18, Y+6	; 0x06
    10b8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	71 f1       	breq	.+92     	; 0x111c <Set_PinLevel+0xb0>
    10c0:	8e 81       	ldd	r24, Y+6	; 0x06
    10c2:	9f 81       	ldd	r25, Y+7	; 0x07
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	e9 f1       	breq	.+122    	; 0x1144 <Set_PinLevel+0xd8>
    10ca:	c3 c0       	rjmp	.+390    	; 0x1252 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			SET_BIT(PORTA,number);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <Set_PinLevel+0x7e>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <Set_PinLevel+0x7a>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	af c0       	rjmp	.+350    	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			SET_BIT(PORTB,number);
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <Set_PinLevel+0xa6>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <Set_PinLevel+0xa2>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	9b c0       	rjmp	.+310    	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			SET_BIT(PORTC,number);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <Set_PinLevel+0xce>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <Set_PinLevel+0xca>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	87 c0       	rjmp	.+270    	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			SET_BIT(PORTD,number);
    1144:	a2 e3       	ldi	r26, 0x32	; 50
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e2 e3       	ldi	r30, 0x32	; 50
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <Set_PinLevel+0xf6>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <Set_PinLevel+0xf2>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	73 c0       	rjmp	.+230    	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3d 83       	std	Y+5, r19	; 0x05
    1174:	2c 83       	std	Y+4, r18	; 0x04
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	59 f1       	breq	.+86     	; 0x11d6 <Set_PinLevel+0x16a>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <Set_PinLevel+0x128>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	69 f0       	breq	.+26     	; 0x11ac <Set_PinLevel+0x140>
    1192:	5f c0       	rjmp	.+190    	; 0x1252 <Set_PinLevel+0x1e6>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	89 f1       	breq	.+98     	; 0x1200 <Set_PinLevel+0x194>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <Set_PinLevel+0x13e>
    11a8:	40 c0       	rjmp	.+128    	; 0x122a <Set_PinLevel+0x1be>
    11aa:	53 c0       	rjmp	.+166    	; 0x1252 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(PORTA,number);
    11ac:	ab e3       	ldi	r26, 0x3B	; 59
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <Set_PinLevel+0x15e>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <Set_PinLevel+0x15a>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	3e c0       	rjmp	.+124    	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB,number);
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <Set_PinLevel+0x188>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <Set_PinLevel+0x184>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	29 c0       	rjmp	.+82     	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC,number);
    1200:	a5 e3       	ldi	r26, 0x35	; 53
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e3       	ldi	r30, 0x35	; 53
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <Set_PinLevel+0x1b2>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <Set_PinLevel+0x1ae>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD,number);
    122a:	a2 e3       	ldi	r26, 0x32	; 50
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <Set_PinLevel+0x1dc>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <Set_PinLevel+0x1d8>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
			break;
		}
	}
}
    1252:	27 96       	adiw	r28, 0x07	; 7
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <Read_PinLevel>:

RET_VALUE_t Read_PinLevel (GroupName_t group, PIN_NO_t number)		// Function to read level of specific bit
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <Read_PinLevel+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <Read_PinLevel+0x8>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8a 83       	std	Y+2, r24	; 0x02
    1274:	6b 83       	std	Y+3, r22	; 0x03
	RET_VALUE_t ret;
	switch (group)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3d 83       	std	Y+5, r19	; 0x05
    127e:	2c 83       	std	Y+4, r18	; 0x04
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	39 f1       	breq	.+78     	; 0x12d8 <Read_PinLevel+0x74>
    128a:	2c 81       	ldd	r18, Y+4	; 0x04
    128c:	3d 81       	ldd	r19, Y+5	; 0x05
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	2c f4       	brge	.+10     	; 0x129e <Read_PinLevel+0x3a>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	61 f0       	breq	.+24     	; 0x12b4 <Read_PinLevel+0x50>
    129c:	52 c0       	rjmp	.+164    	; 0x1342 <Read_PinLevel+0xde>
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	51 f1       	breq	.+84     	; 0x12fc <Read_PinLevel+0x98>
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	b9 f1       	breq	.+110    	; 0x1320 <Read_PinLevel+0xbc>
    12b2:	47 c0       	rjmp	.+142    	; 0x1342 <Read_PinLevel+0xde>
	{
	case PORT_A:
		ret = BIT_IS_SET(PINA,number);
    12b4:	e9 e3       	ldi	r30, 0x39	; 57
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <Read_PinLevel+0x6a>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <Read_PinLevel+0x66>
    12d2:	84 23       	and	r24, r20
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	35 c0       	rjmp	.+106    	; 0x1342 <Read_PinLevel+0xde>
		break;
	case PORT_B:
		ret = BIT_IS_SET(PINB,number);
    12d8:	e6 e3       	ldi	r30, 0x36	; 54
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <Read_PinLevel+0x8e>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <Read_PinLevel+0x8a>
    12f6:	84 23       	and	r24, r20
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	23 c0       	rjmp	.+70     	; 0x1342 <Read_PinLevel+0xde>
		break;
	case PORT_C:
		ret = BIT_IS_SET(PINC,number);
    12fc:	e3 e3       	ldi	r30, 0x33	; 51
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <Read_PinLevel+0xb2>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <Read_PinLevel+0xae>
    131a:	84 23       	and	r24, r20
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	11 c0       	rjmp	.+34     	; 0x1342 <Read_PinLevel+0xde>
		break;
	case PORT_D:
		ret = BIT_IS_SET(PIND,number);
    1320:	e0 e3       	ldi	r30, 0x30	; 48
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <Read_PinLevel+0xd6>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <Read_PinLevel+0xd2>
    133e:	84 23       	and	r24, r20
    1340:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <Set_GroupDir>:

//	 For Group Of Pins

void Set_GroupDir (GroupName_t group, u8 value)							// Function to set direction of several pins
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <Set_GroupDir+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <Set_GroupDir+0x8>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3c 83       	std	Y+4, r19	; 0x04
    136c:	2b 83       	std	Y+3, r18	; 0x03
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	91 05       	cpc	r25, r1
    1376:	d1 f0       	breq	.+52     	; 0x13ac <Set_GroupDir+0x58>
    1378:	2b 81       	ldd	r18, Y+3	; 0x03
    137a:	3c 81       	ldd	r19, Y+4	; 0x04
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	2c f4       	brge	.+10     	; 0x138c <Set_GroupDir+0x38>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	61 f0       	breq	.+24     	; 0x13a2 <Set_GroupDir+0x4e>
    138a:	1e c0       	rjmp	.+60     	; 0x13c8 <Set_GroupDir+0x74>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	81 f0       	breq	.+32     	; 0x13b6 <Set_GroupDir+0x62>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	81 f0       	breq	.+32     	; 0x13c0 <Set_GroupDir+0x6c>
    13a0:	13 c0       	rjmp	.+38     	; 0x13c8 <Set_GroupDir+0x74>
	{
	case PORT_A:
		DDRA = value;
    13a2:	ea e3       	ldi	r30, 0x3A	; 58
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <Set_GroupDir+0x74>
		break;
	case PORT_B:
		DDRB = value;
    13ac:	e7 e3       	ldi	r30, 0x37	; 55
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 83       	st	Z, r24
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <Set_GroupDir+0x74>
		break;
	case PORT_C:
		DDRC = value;
    13b6:	e4 e3       	ldi	r30, 0x34	; 52
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <Set_GroupDir+0x74>
		break;
	case PORT_D:
		DDRD = value;
    13c0:	e1 e3       	ldi	r30, 0x31	; 49
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
		break;
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <Set_GroupLevel>:

void Set_GroupLevel (GroupName_t group, u8 value)							// Function to set level of several pins
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <Set_GroupLevel+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <Set_GroupLevel+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	2b 83       	std	Y+3, r18	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	d1 f0       	breq	.+52     	; 0x142e <Set_GroupLevel+0x58>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <Set_GroupLevel+0x38>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 f0       	breq	.+24     	; 0x1424 <Set_GroupLevel+0x4e>
    140c:	1e c0       	rjmp	.+60     	; 0x144a <Set_GroupLevel+0x74>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	81 f0       	breq	.+32     	; 0x1438 <Set_GroupLevel+0x62>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	81 f0       	breq	.+32     	; 0x1442 <Set_GroupLevel+0x6c>
    1422:	13 c0       	rjmp	.+38     	; 0x144a <Set_GroupLevel+0x74>
	{
	case PORT_A:
		PORTA = value;
    1424:	eb e3       	ldi	r30, 0x3B	; 59
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	80 83       	st	Z, r24
    142c:	0e c0       	rjmp	.+28     	; 0x144a <Set_GroupLevel+0x74>
		break;
	case PORT_B:
		PORTB = value;
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
    1436:	09 c0       	rjmp	.+18     	; 0x144a <Set_GroupLevel+0x74>
		break;
	case PORT_C:
		PORTC = value;
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	80 83       	st	Z, r24
    1440:	04 c0       	rjmp	.+8      	; 0x144a <Set_GroupLevel+0x74>
		break;
	case PORT_D:
		PORTD = value;
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 83       	st	Z, r24
		break;
	}
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0);  // AREF = AVcc
    1460:	e7 e2       	ldi	r30, 0x27	; 39
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 e4       	ldi	r24, 0x40	; 64
    1466:	80 83       	st	Z, r24

	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  // ADC Enable and prescaler of 128
    1468:	e6 e2       	ldi	r30, 0x26	; 38
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	87 e8       	ldi	r24, 0x87	; 135
    146e:	80 83       	st	Z, r24

}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <ADC_readChannel>:
u16 ADC_readChannel (u8 channel) // for choosing which channel to use
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
	channel &= 0b00000111;  // AND operation with 7
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	87 70       	andi	r24, 0x07	; 7
    1486:	89 83       	std	Y+1, r24	; 0x01
	 ADMUX = (ADMUX & 0xF8)|channel;
    1488:	a7 e2       	ldi	r26, 0x27	; 39
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e7 e2       	ldi	r30, 0x27	; 39
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	98 2f       	mov	r25, r24
    1494:	98 7f       	andi	r25, 0xF8	; 248
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	89 2b       	or	r24, r25
    149a:	8c 93       	st	X, r24

	 ADCSRA |= (1<<ADSC); // start single conversion and set ADSC
    149c:	a6 e2       	ldi	r26, 0x26	; 38
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e6 e2       	ldi	r30, 0x26	; 38
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	80 64       	ori	r24, 0x40	; 64
    14a8:	8c 93       	st	X, r24

	 while(ADCSRA & (1<<ADSC));  // wait for conversion to complete ADSC becomes '0' again
    14aa:	e6 e2       	ldi	r30, 0x26	; 38
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	80 74       	andi	r24, 0x40	; 64
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	b9 f7       	brne	.-18     	; 0x14aa <ADC_readChannel+0x34>
	 return (ADC);
    14bc:	e4 e2       	ldi	r30, 0x24	; 36
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
	}
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <Keypad_GetPressedKey>:
#endif

/*Function Definition*/

u8 Keypad_GetPressedKey (void)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <Keypad_GetPressedKey+0x6>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    14d6:	19 82       	std	Y+1, r1	; 0x01
    14d8:	4c c0       	rjmp	.+152    	; 0x1572 <Keypad_GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    14da:	ea e3       	ldi	r30, 0x3A	; 58
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	80 e1       	ldi	r24, 0x10	; 16
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <Keypad_GetPressedKey+0x22>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <Keypad_GetPressedKey+0x1e>
    14f2:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	80 e1       	ldi	r24, 0x10	; 16
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <Keypad_GetPressedKey+0x3e>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <Keypad_GetPressedKey+0x3a>
    150e:	80 95       	com	r24
    1510:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    1512:	1a 82       	std	Y+2, r1	; 0x02
    1514:	28 c0       	rjmp	.+80     	; 0x1566 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    1516:	e9 e3       	ldi	r30, 0x39	; 57
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <Keypad_GetPressedKey+0x62>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <Keypad_GetPressedKey+0x5e>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	91 f4       	brne	.+36     	; 0x1560 <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	98 2f       	mov	r25, r24
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	89 0f       	add	r24, r25
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	0e 94 be 0a 	call	0x157c	; 0x157c <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	8f 5f       	subi	r24, 0xFF	; 255
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	a8 f2       	brcs	.-86     	; 0x1516 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey (void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	08 f4       	brcc	.+2      	; 0x157a <Keypad_GetPressedKey+0xae>
    1578:	b0 cf       	rjmp	.-160    	; 0x14da <Keypad_GetPressedKey+0xe>
    157a:	ad cf       	rjmp	.-166    	; 0x14d6 <Keypad_GetPressedKey+0xa>

0000157c <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <Keypad_4x4_adjustKeyNumber+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <Keypad_4x4_adjustKeyNumber+0x8>
    1584:	0f 92       	push	r0
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	88 30       	cpi	r24, 0x08	; 8
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <Keypad_4x4_adjustKeyNumber+0x26>
    15a0:	70 c0       	rjmp	.+224    	; 0x1682 <Keypad_4x4_adjustKeyNumber+0x106>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	29 30       	cpi	r18, 0x09	; 9
    15a8:	31 05       	cpc	r19, r1
    15aa:	5c f5       	brge	.+86     	; 0x1602 <Keypad_4x4_adjustKeyNumber+0x86>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <Keypad_4x4_adjustKeyNumber+0x3c>
    15b6:	59 c0       	rjmp	.+178    	; 0x166a <Keypad_4x4_adjustKeyNumber+0xee>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	25 30       	cpi	r18, 0x05	; 5
    15be:	31 05       	cpc	r19, r1
    15c0:	9c f4       	brge	.+38     	; 0x15e8 <Keypad_4x4_adjustKeyNumber+0x6c>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <Keypad_4x4_adjustKeyNumber+0x52>
    15cc:	48 c0       	rjmp	.+144    	; 0x165e <Keypad_4x4_adjustKeyNumber+0xe2>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	23 30       	cpi	r18, 0x03	; 3
    15d4:	31 05       	cpc	r19, r1
    15d6:	0c f0       	brlt	.+2      	; 0x15da <Keypad_4x4_adjustKeyNumber+0x5e>
    15d8:	45 c0       	rjmp	.+138    	; 0x1664 <Keypad_4x4_adjustKeyNumber+0xe8>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <Keypad_4x4_adjustKeyNumber+0x6a>
    15e4:	39 c0       	rjmp	.+114    	; 0x1658 <Keypad_4x4_adjustKeyNumber+0xdc>
    15e6:	67 c0       	rjmp	.+206    	; 0x16b6 <Keypad_4x4_adjustKeyNumber+0x13a>
    15e8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ea:	3c 81       	ldd	r19, Y+4	; 0x04
    15ec:	26 30       	cpi	r18, 0x06	; 6
    15ee:	31 05       	cpc	r19, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <Keypad_4x4_adjustKeyNumber+0x78>
    15f2:	41 c0       	rjmp	.+130    	; 0x1676 <Keypad_4x4_adjustKeyNumber+0xfa>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	87 30       	cpi	r24, 0x07	; 7
    15fa:	91 05       	cpc	r25, r1
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <Keypad_4x4_adjustKeyNumber+0x84>
    15fe:	3e c0       	rjmp	.+124    	; 0x167c <Keypad_4x4_adjustKeyNumber+0x100>
    1600:	37 c0       	rjmp	.+110    	; 0x1670 <Keypad_4x4_adjustKeyNumber+0xf4>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	2c 30       	cpi	r18, 0x0C	; 12
    1608:	31 05       	cpc	r19, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <Keypad_4x4_adjustKeyNumber+0x92>
    160c:	46 c0       	rjmp	.+140    	; 0x169a <Keypad_4x4_adjustKeyNumber+0x11e>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	8d 30       	cpi	r24, 0x0D	; 13
    1614:	91 05       	cpc	r25, r1
    1616:	5c f4       	brge	.+22     	; 0x162e <Keypad_4x4_adjustKeyNumber+0xb2>
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	2a 30       	cpi	r18, 0x0A	; 10
    161e:	31 05       	cpc	r19, r1
    1620:	b1 f1       	breq	.+108    	; 0x168e <Keypad_4x4_adjustKeyNumber+0x112>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	8b 30       	cpi	r24, 0x0B	; 11
    1628:	91 05       	cpc	r25, r1
    162a:	a4 f5       	brge	.+104    	; 0x1694 <Keypad_4x4_adjustKeyNumber+0x118>
    162c:	2d c0       	rjmp	.+90     	; 0x1688 <Keypad_4x4_adjustKeyNumber+0x10c>
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	2e 30       	cpi	r18, 0x0E	; 14
    1634:	31 05       	cpc	r19, r1
    1636:	b9 f1       	breq	.+110    	; 0x16a6 <Keypad_4x4_adjustKeyNumber+0x12a>
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	8e 30       	cpi	r24, 0x0E	; 14
    163e:	91 05       	cpc	r25, r1
    1640:	7c f1       	brlt	.+94     	; 0x16a0 <Keypad_4x4_adjustKeyNumber+0x124>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	2f 30       	cpi	r18, 0x0F	; 15
    1648:	31 05       	cpc	r19, r1
    164a:	79 f1       	breq	.+94     	; 0x16aa <Keypad_4x4_adjustKeyNumber+0x12e>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	80 31       	cpi	r24, 0x10	; 16
    1652:	91 05       	cpc	r25, r1
    1654:	69 f1       	breq	.+90     	; 0x16b0 <Keypad_4x4_adjustKeyNumber+0x134>
    1656:	2f c0       	rjmp	.+94     	; 0x16b6 <Keypad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:		return 7;
    1658:	97 e0       	ldi	r25, 0x07	; 7
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	2d c0       	rjmp	.+90     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 2:		return 8;
    165e:	28 e0       	ldi	r18, 0x08	; 8
    1660:	2a 83       	std	Y+2, r18	; 0x02
    1662:	2a c0       	rjmp	.+84     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 3:		return 9;
    1664:	39 e0       	ldi	r19, 0x09	; 9
    1666:	3a 83       	std	Y+2, r19	; 0x02
    1668:	27 c0       	rjmp	.+78     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 4:		return '/';
    166a:	8f e2       	ldi	r24, 0x2F	; 47
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	24 c0       	rjmp	.+72     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 5:		return 4;
    1670:	94 e0       	ldi	r25, 0x04	; 4
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	21 c0       	rjmp	.+66     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 6:		return 5;
    1676:	25 e0       	ldi	r18, 0x05	; 5
    1678:	2a 83       	std	Y+2, r18	; 0x02
    167a:	1e c0       	rjmp	.+60     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 7:		return 6;
    167c:	36 e0       	ldi	r19, 0x06	; 6
    167e:	3a 83       	std	Y+2, r19	; 0x02
    1680:	1b c0       	rjmp	.+54     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 8:		return '*';
    1682:	8a e2       	ldi	r24, 0x2A	; 42
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	18 c0       	rjmp	.+48     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 9:		return 1;
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	15 c0       	rjmp	.+42     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 10:	return 2;
    168e:	22 e0       	ldi	r18, 0x02	; 2
    1690:	2a 83       	std	Y+2, r18	; 0x02
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 11:	return 3;
    1694:	33 e0       	ldi	r19, 0x03	; 3
    1696:	3a 83       	std	Y+2, r19	; 0x02
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 12:	return '-';
    169a:	8d e2       	ldi	r24, 0x2D	; 45
    169c:	8a 83       	std	Y+2, r24	; 0x02
    169e:	0c c0       	rjmp	.+24     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 13:	return 'c';
    16a0:	93 e6       	ldi	r25, 0x63	; 99
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 14:	return 0;
    16a6:	1a 82       	std	Y+2, r1	; 0x02
    16a8:	07 c0       	rjmp	.+14     	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 15:	return '=';
    16aa:	2d e3       	ldi	r18, 0x3D	; 61
    16ac:	2a 83       	std	Y+2, r18	; 0x02
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 16:	return '+';
    16b0:	3b e2       	ldi	r19, 0x2B	; 43
    16b2:	3a 83       	std	Y+2, r19	; 0x02
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <Keypad_4x4_adjustKeyNumber+0x13c>
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <Keypad_4x4_adjustKeyNumber+0x140>
	break;
	}
}
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <LCD_Init>:
#include <avr/delay.h>
#include <stdio.h>
/*Function Definition*/

void LCD_Init (void)			                     // initialization of LCD
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	e8 97       	sbiw	r28, 0x38	; 56
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
	Set_GroupDir (LCD_DATA_PORT_DIR,0xFF);			 //Set PORTB as o/p port
    16e2:	e4 e3       	ldi	r30, 0x34	; 52
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	6f ef       	ldi	r22, 0xFF	; 255
    16ea:	0e 94 aa 09 	call	0x1354	; 0x1354 <Set_GroupDir>
	LCD_CTRL_PORT_DIR = (1<<EN) | (1<<RS) | (1<<RW); //Set RS, RW, ENABLE pins as o/p port
    16ee:	e1 e3       	ldi	r30, 0x31	; 49
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	87 e0       	ldi	r24, 0x07	; 7
    16f4:	80 83       	st	Z, r24
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a8 e4       	ldi	r26, 0x48	; 72
    16fc:	b2 e4       	ldi	r27, 0x42	; 66
    16fe:	8d ab       	std	Y+53, r24	; 0x35
    1700:	9e ab       	std	Y+54, r25	; 0x36
    1702:	af ab       	std	Y+55, r26	; 0x37
    1704:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1706:	6d a9       	ldd	r22, Y+53	; 0x35
    1708:	7e a9       	ldd	r23, Y+54	; 0x36
    170a:	8f a9       	ldd	r24, Y+55	; 0x37
    170c:	98 ad       	ldd	r25, Y+56	; 0x38
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a e7       	ldi	r20, 0x7A	; 122
    1714:	55 e4       	ldi	r21, 0x45	; 69
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	89 ab       	std	Y+49, r24	; 0x31
    1720:	9a ab       	std	Y+50, r25	; 0x32
    1722:	ab ab       	std	Y+51, r26	; 0x33
    1724:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1726:	69 a9       	ldd	r22, Y+49	; 0x31
    1728:	7a a9       	ldd	r23, Y+50	; 0x32
    172a:	8b a9       	ldd	r24, Y+51	; 0x33
    172c:	9c a9       	ldd	r25, Y+52	; 0x34
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	2c f4       	brge	.+10     	; 0x1748 <LCD_Init+0x7a>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	98 ab       	std	Y+48, r25	; 0x30
    1744:	8f a7       	std	Y+47, r24	; 0x2f
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    1748:	69 a9       	ldd	r22, Y+49	; 0x31
    174a:	7a a9       	ldd	r23, Y+50	; 0x32
    174c:	8b a9       	ldd	r24, Y+51	; 0x33
    174e:	9c a9       	ldd	r25, Y+52	; 0x34
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	57 e4       	ldi	r21, 0x47	; 71
    1758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175c:	18 16       	cp	r1, r24
    175e:	4c f5       	brge	.+82     	; 0x17b2 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1760:	6d a9       	ldd	r22, Y+53	; 0x35
    1762:	7e a9       	ldd	r23, Y+54	; 0x36
    1764:	8f a9       	ldd	r24, Y+55	; 0x37
    1766:	98 ad       	ldd	r25, Y+56	; 0x38
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	98 ab       	std	Y+48, r25	; 0x30
    1786:	8f a7       	std	Y+47, r24	; 0x2f
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <LCD_Init+0xda>
    178a:	80 e9       	ldi	r24, 0x90	; 144
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	9e a7       	std	Y+46, r25	; 0x2e
    1790:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1792:	8d a5       	ldd	r24, Y+45	; 0x2d
    1794:	9e a5       	ldd	r25, Y+46	; 0x2e
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_Init+0xc8>
    179a:	9e a7       	std	Y+46, r25	; 0x2e
    179c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a0:	98 a9       	ldd	r25, Y+48	; 0x30
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	98 ab       	std	Y+48, r25	; 0x30
    17a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17aa:	98 a9       	ldd	r25, Y+48	; 0x30
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	69 f7       	brne	.-38     	; 0x178a <LCD_Init+0xbc>
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	69 a9       	ldd	r22, Y+49	; 0x31
    17b4:	7a a9       	ldd	r23, Y+50	; 0x32
    17b6:	8b a9       	ldd	r24, Y+51	; 0x33
    17b8:	9c a9       	ldd	r25, Y+52	; 0x34
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	9c a7       	std	Y+44, r25	; 0x2c
    17cc:	8b a7       	std	Y+43, r24	; 0x2b
    17ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_Init+0x104>
    17d6:	9c a7       	std	Y+44, r25	; 0x2c
    17d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); 							    	 //Delay before initialization FUNCTION
	Send_CMD (TWO_LINE_LCD_EIGHT_BIT_MODE);	    	 //Set LCD mode as 8-bit mode, 2-lines, 5*8 Dots
    17da:	88 e3       	ldi	r24, 0x38	; 56
    17dc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Send_CMD>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e8       	ldi	r26, 0x80	; 128
    17e6:	bf e3       	ldi	r27, 0x3F	; 63
    17e8:	8f a3       	std	Y+39, r24	; 0x27
    17ea:	98 a7       	std	Y+40, r25	; 0x28
    17ec:	a9 a7       	std	Y+41, r26	; 0x29
    17ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6f a1       	ldd	r22, Y+39	; 0x27
    17f2:	78 a5       	ldd	r23, Y+40	; 0x28
    17f4:	89 a5       	ldd	r24, Y+41	; 0x29
    17f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a e7       	ldi	r20, 0x7A	; 122
    17fe:	55 e4       	ldi	r21, 0x45	; 69
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8b a3       	std	Y+35, r24	; 0x23
    180a:	9c a3       	std	Y+36, r25	; 0x24
    180c:	ad a3       	std	Y+37, r26	; 0x25
    180e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1810:	6b a1       	ldd	r22, Y+35	; 0x23
    1812:	7c a1       	ldd	r23, Y+36	; 0x24
    1814:	8d a1       	ldd	r24, Y+37	; 0x25
    1816:	9e a1       	ldd	r25, Y+38	; 0x26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <LCD_Init+0x164>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <LCD_Init+0x1e2>
	else if (__tmp > 65535)
    1832:	6b a1       	ldd	r22, Y+35	; 0x23
    1834:	7c a1       	ldd	r23, Y+36	; 0x24
    1836:	8d a1       	ldd	r24, Y+37	; 0x25
    1838:	9e a1       	ldd	r25, Y+38	; 0x26
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <LCD_Init+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6f a1       	ldd	r22, Y+39	; 0x27
    184c:	78 a5       	ldd	r23, Y+40	; 0x28
    184e:	89 a5       	ldd	r24, Y+41	; 0x29
    1850:	9a a5       	ldd	r25, Y+42	; 0x2a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9a a3       	std	Y+34, r25	; 0x22
    1870:	89 a3       	std	Y+33, r24	; 0x21
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <LCD_Init+0x1c4>
    1874:	80 e9       	ldi	r24, 0x90	; 144
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	98 a3       	std	Y+32, r25	; 0x20
    187a:	8f 8f       	std	Y+31, r24	; 0x1f
    187c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187e:	98 a1       	ldd	r25, Y+32	; 0x20
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_Init+0x1b2>
    1884:	98 a3       	std	Y+32, r25	; 0x20
    1886:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	89 a1       	ldd	r24, Y+33	; 0x21
    188a:	9a a1       	ldd	r25, Y+34	; 0x22
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	89 a1       	ldd	r24, Y+33	; 0x21
    1894:	9a a1       	ldd	r25, Y+34	; 0x22
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <LCD_Init+0x1a6>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <LCD_Init+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6b a1       	ldd	r22, Y+35	; 0x23
    189e:	7c a1       	ldd	r23, Y+36	; 0x24
    18a0:	8d a1       	ldd	r24, Y+37	; 0x25
    18a2:	9e a1       	ldd	r25, Y+38	; 0x26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	9e 8f       	std	Y+30, r25	; 0x1e
    18b6:	8d 8f       	std	Y+29, r24	; 0x1d
    18b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_Init+0x1ee>
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Send_CMD (CURSOR_OFF);					    	 //MAKE Cursor off
    18c4:	8c e0       	ldi	r24, 0x0C	; 12
    18c6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Send_CMD>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e8       	ldi	r26, 0x80	; 128
    18d0:	bf e3       	ldi	r27, 0x3F	; 63
    18d2:	89 8f       	std	Y+25, r24	; 0x19
    18d4:	9a 8f       	std	Y+26, r25	; 0x1a
    18d6:	ab 8f       	std	Y+27, r26	; 0x1b
    18d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a e7       	ldi	r20, 0x7A	; 122
    18e8:	55 e4       	ldi	r21, 0x45	; 69
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8d 8b       	std	Y+21, r24	; 0x15
    18f4:	9e 8b       	std	Y+22, r25	; 0x16
    18f6:	af 8b       	std	Y+23, r26	; 0x17
    18f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <LCD_Init+0x24e>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	3f c0       	rjmp	.+126    	; 0x199a <LCD_Init+0x2cc>
	else if (__tmp > 65535)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <LCD_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	0f c0       	rjmp	.+30     	; 0x197c <LCD_Init+0x2ae>
    195e:	80 e9       	ldi	r24, 0x90	; 144
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	9a 89       	ldd	r25, Y+18	; 0x12
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_Init+0x29c>
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9c 8b       	std	Y+20, r25	; 0x14
    197a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8b 89       	ldd	r24, Y+19	; 0x13
    197e:	9c 89       	ldd	r25, Y+20	; 0x14
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <LCD_Init+0x290>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <LCD_Init+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	98 8b       	std	Y+16, r25	; 0x10
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    19a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a4:	98 89       	ldd	r25, Y+16	; 0x10
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_Init+0x2d8>
    19aa:	98 8b       	std	Y+16, r25	; 0x10
    19ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Send_CMD (CLEAR_COMMAND);				    	 //Clear LCD at initialization
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Send_CMD>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e4       	ldi	r27, 0x40	; 64
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a e7       	ldi	r20, 0x7A	; 122
    19d2:	55 e4       	ldi	r21, 0x45	; 69
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <LCD_Init+0x338>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <LCD_Init+0x3b6>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <LCD_Init+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <LCD_Init+0x398>
    1a48:	80 e9       	ldi	r24, 0x90	; 144
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_Init+0x386>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <LCD_Init+0x37a>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <LCD_Init+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_Init+0x3c2>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a98:	e8 96       	adiw	r28, 0x38	; 56
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <Send_CMD>:

void Send_CMD (u8 cmd)				// Function For Sending commands to LCD
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	ab 97       	sbiw	r28, 0x2b	; 43
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	8b a7       	std	Y+43, r24	; 0x2b
	CLEAR_BIT(LCD_CTRL_PORT, RS);	//clear RS Pin (Command Instruction)
    1ac0:	a2 e3       	ldi	r26, 0x32	; 50
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	8e 7f       	andi	r24, 0xFE	; 254
    1acc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//clear RW Pin (Write Mood)
    1ace:	a2 e3       	ldi	r26, 0x32	; 50
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e2 e3       	ldi	r30, 0x32	; 50
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8d 7f       	andi	r24, 0xFD	; 253
    1ada:	8c 93       	st	X, r24
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	8f a3       	std	Y+39, r24	; 0x27
    1ae6:	98 a7       	std	Y+40, r25	; 0x28
    1ae8:	a9 a7       	std	Y+41, r26	; 0x29
    1aea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	6f a1       	ldd	r22, Y+39	; 0x27
    1aee:	78 a5       	ldd	r23, Y+40	; 0x28
    1af0:	89 a5       	ldd	r24, Y+41	; 0x29
    1af2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	4a e7       	ldi	r20, 0x7A	; 122
    1afa:	55 e4       	ldi	r21, 0x45	; 69
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8b a3       	std	Y+35, r24	; 0x23
    1b06:	9c a3       	std	Y+36, r25	; 0x24
    1b08:	ad a3       	std	Y+37, r26	; 0x25
    1b0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b10:	8d a1       	ldd	r24, Y+37	; 0x25
    1b12:	9e a1       	ldd	r25, Y+38	; 0x26
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <Send_CMD+0x84>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9a a3       	std	Y+34, r25	; 0x22
    1b2a:	89 a3       	std	Y+33, r24	; 0x21
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <Send_CMD+0x102>
	else if (__tmp > 65535)
    1b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b30:	7c a1       	ldd	r23, Y+36	; 0x24
    1b32:	8d a1       	ldd	r24, Y+37	; 0x25
    1b34:	9e a1       	ldd	r25, Y+38	; 0x26
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	4f e7       	ldi	r20, 0x7F	; 127
    1b3c:	57 e4       	ldi	r21, 0x47	; 71
    1b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	4c f5       	brge	.+82     	; 0x1b98 <Send_CMD+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	6f a1       	ldd	r22, Y+39	; 0x27
    1b48:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <Send_CMD+0xe4>
    1b70:	80 e9       	ldi	r24, 0x90	; 144
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	98 a3       	std	Y+32, r25	; 0x20
    1b76:	8f 8f       	std	Y+31, r24	; 0x1f
    1b78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b7a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <Send_CMD+0xd2>
    1b80:	98 a3       	std	Y+32, r25	; 0x20
    1b82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	89 a1       	ldd	r24, Y+33	; 0x21
    1b86:	9a a1       	ldd	r25, Y+34	; 0x22
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	9a a3       	std	Y+34, r25	; 0x22
    1b8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b90:	9a a1       	ldd	r25, Y+34	; 0x22
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <Send_CMD+0xc6>
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <Send_CMD+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b98:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9a a3       	std	Y+34, r25	; 0x22
    1baa:	89 a3       	std	Y+33, r24	; 0x21
    1bac:	89 a1       	ldd	r24, Y+33	; 0x21
    1bae:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <Send_CMD+0x10e>
    1bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bbe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Enable LCD
    1bc0:	a2 e3       	ldi	r26, 0x32	; 50
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e2 e3       	ldi	r30, 0x32	; 50
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	84 60       	ori	r24, 0x04	; 4
    1bcc:	8c 93       	st	X, r24
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e8       	ldi	r26, 0x80	; 128
    1bd4:	bf e3       	ldi	r27, 0x3F	; 63
    1bd6:	89 8f       	std	Y+25, r24	; 0x19
    1bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bda:	ab 8f       	std	Y+27, r26	; 0x1b
    1bdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bde:	69 8d       	ldd	r22, Y+25	; 0x19
    1be0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a e7       	ldi	r20, 0x7A	; 122
    1bec:	55 e4       	ldi	r21, 0x45	; 69
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8d 8b       	std	Y+21, r24	; 0x15
    1bf8:	9e 8b       	std	Y+22, r25	; 0x16
    1bfa:	af 8b       	std	Y+23, r26	; 0x17
    1bfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1c00:	7e 89       	ldd	r23, Y+22	; 0x16
    1c02:	8f 89       	ldd	r24, Y+23	; 0x17
    1c04:	98 8d       	ldd	r25, Y+24	; 0x18
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <Send_CMD+0x176>
		__ticks = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 8b       	std	Y+20, r25	; 0x14
    1c1c:	8b 8b       	std	Y+19, r24	; 0x13
    1c1e:	3f c0       	rjmp	.+126    	; 0x1c9e <Send_CMD+0x1f4>
	else if (__tmp > 65535)
    1c20:	6d 89       	ldd	r22, Y+21	; 0x15
    1c22:	7e 89       	ldd	r23, Y+22	; 0x16
    1c24:	8f 89       	ldd	r24, Y+23	; 0x17
    1c26:	98 8d       	ldd	r25, Y+24	; 0x18
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	4c f5       	brge	.+82     	; 0x1c8a <Send_CMD+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c38:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <Send_CMD+0x1d6>
    1c62:	80 e9       	ldi	r24, 0x90	; 144
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	9a 8b       	std	Y+18, r25	; 0x12
    1c68:	89 8b       	std	Y+17, r24	; 0x11
    1c6a:	89 89       	ldd	r24, Y+17	; 0x11
    1c6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <Send_CMD+0x1c4>
    1c72:	9a 8b       	std	Y+18, r25	; 0x12
    1c74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c76:	8b 89       	ldd	r24, Y+19	; 0x13
    1c78:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	9c 8b       	std	Y+20, r25	; 0x14
    1c7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c80:	8b 89       	ldd	r24, Y+19	; 0x13
    1c82:	9c 89       	ldd	r25, Y+20	; 0x14
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <Send_CMD+0x1b8>
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <Send_CMD+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	98 8b       	std	Y+16, r25	; 0x10
    1ca4:	8f 87       	std	Y+15, r24	; 0x0f
    1ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca8:	98 89       	ldd	r25, Y+16	; 0x10
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <Send_CMD+0x200>
    1cae:	98 8b       	std	Y+16, r25	; 0x10
    1cb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay until sending commands
	LCD_DATA_PORT = cmd; 			//Send command to data pins
    1cb2:	e5 e3       	ldi	r30, 0x35	; 53
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb8:	80 83       	st	Z, r24
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e8       	ldi	r26, 0x80	; 128
    1cc0:	bf e3       	ldi	r27, 0x3F	; 63
    1cc2:	8b 87       	std	Y+11, r24	; 0x0b
    1cc4:	9c 87       	std	Y+12, r25	; 0x0c
    1cc6:	ad 87       	std	Y+13, r26	; 0x0d
    1cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	55 e4       	ldi	r21, 0x45	; 69
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8f 83       	std	Y+7, r24	; 0x07
    1ce4:	98 87       	std	Y+8, r25	; 0x08
    1ce6:	a9 87       	std	Y+9, r26	; 0x09
    1ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cea:	6f 81       	ldd	r22, Y+7	; 0x07
    1cec:	78 85       	ldd	r23, Y+8	; 0x08
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <Send_CMD+0x262>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <Send_CMD+0x2e0>
	else if (__tmp > 65535)
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f5       	brge	.+82     	; 0x1d76 <Send_CMD+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <Send_CMD+0x2c2>
    1d4e:	80 e9       	ldi	r24, 0x90	; 144
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <Send_CMD+0x2b0>
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <Send_CMD+0x2a4>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <Send_CMD+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <Send_CMD+0x2ec>
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Disable LCD
    1d9e:	a2 e3       	ldi	r26, 0x32	; 50
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e2 e3       	ldi	r30, 0x32	; 50
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8b 7f       	andi	r24, 0xFB	; 251
    1daa:	8c 93       	st	X, r24
}
    1dac:	ab 96       	adiw	r28, 0x2b	; 43
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <Send_DATA>:

void Send_DATA (u8 data)			// Function for sending data to LCD
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	ab 97       	sbiw	r28, 0x2b	; 43
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT(LCD_CTRL_PORT, RS);		//set RS Pin (Command Instruction)
    1dd4:	a2 e3       	ldi	r26, 0x32	; 50
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e2 e3       	ldi	r30, 0x32	; 50
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	81 60       	ori	r24, 0x01	; 1
    1de0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//clear RW Pin (Write Mood)
    1de2:	a2 e3       	ldi	r26, 0x32	; 50
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e2 e3       	ldi	r30, 0x32	; 50
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8d 7f       	andi	r24, 0xFD	; 253
    1dee:	8c 93       	st	X, r24
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	bf e3       	ldi	r27, 0x3F	; 63
    1df8:	8f a3       	std	Y+39, r24	; 0x27
    1dfa:	98 a7       	std	Y+40, r25	; 0x28
    1dfc:	a9 a7       	std	Y+41, r26	; 0x29
    1dfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	6f a1       	ldd	r22, Y+39	; 0x27
    1e02:	78 a5       	ldd	r23, Y+40	; 0x28
    1e04:	89 a5       	ldd	r24, Y+41	; 0x29
    1e06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	55 e4       	ldi	r21, 0x45	; 69
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8b a3       	std	Y+35, r24	; 0x23
    1e1a:	9c a3       	std	Y+36, r25	; 0x24
    1e1c:	ad a3       	std	Y+37, r26	; 0x25
    1e1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <Send_DATA+0x84>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9a a3       	std	Y+34, r25	; 0x22
    1e3e:	89 a3       	std	Y+33, r24	; 0x21
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <Send_DATA+0x102>
	else if (__tmp > 65535)
    1e42:	6b a1       	ldd	r22, Y+35	; 0x23
    1e44:	7c a1       	ldd	r23, Y+36	; 0x24
    1e46:	8d a1       	ldd	r24, Y+37	; 0x25
    1e48:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <Send_DATA+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <Send_DATA+0xe4>
    1e84:	80 e9       	ldi	r24, 0x90	; 144
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	98 a3       	std	Y+32, r25	; 0x20
    1e8a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e8e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <Send_DATA+0xd2>
    1e94:	98 a3       	std	Y+32, r25	; 0x20
    1e96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	9a a3       	std	Y+34, r25	; 0x22
    1ea0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <Send_DATA+0xc6>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <Send_DATA+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	6b a1       	ldd	r22, Y+35	; 0x23
    1eae:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9a a3       	std	Y+34, r25	; 0x22
    1ebe:	89 a3       	std	Y+33, r24	; 0x21
    1ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <Send_DATA+0x10e>
    1ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Enable LCD
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	84 60       	ori	r24, 0x04	; 4
    1ee0:	8c 93       	st	X, r24
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e8       	ldi	r26, 0x80	; 128
    1ee8:	bf e3       	ldi	r27, 0x3F	; 63
    1eea:	89 8f       	std	Y+25, r24	; 0x19
    1eec:	9a 8f       	std	Y+26, r25	; 0x1a
    1eee:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a e7       	ldi	r20, 0x7A	; 122
    1f00:	55 e4       	ldi	r21, 0x45	; 69
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8d 8b       	std	Y+21, r24	; 0x15
    1f0c:	9e 8b       	std	Y+22, r25	; 0x16
    1f0e:	af 8b       	std	Y+23, r26	; 0x17
    1f10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f12:	6d 89       	ldd	r22, Y+21	; 0x15
    1f14:	7e 89       	ldd	r23, Y+22	; 0x16
    1f16:	8f 89       	ldd	r24, Y+23	; 0x17
    1f18:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <Send_DATA+0x176>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <Send_DATA+0x1f4>
	else if (__tmp > 65535)
    1f34:	6d 89       	ldd	r22, Y+21	; 0x15
    1f36:	7e 89       	ldd	r23, Y+22	; 0x16
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	3f ef       	ldi	r19, 0xFF	; 255
    1f40:	4f e7       	ldi	r20, 0x7F	; 127
    1f42:	57 e4       	ldi	r21, 0x47	; 71
    1f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f48:	18 16       	cp	r1, r24
    1f4a:	4c f5       	brge	.+82     	; 0x1f9e <Send_DATA+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e2       	ldi	r20, 0x20	; 32
    1f5a:	51 e4       	ldi	r21, 0x41	; 65
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9c 8b       	std	Y+20, r25	; 0x14
    1f72:	8b 8b       	std	Y+19, r24	; 0x13
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <Send_DATA+0x1d6>
    1f76:	80 e9       	ldi	r24, 0x90	; 144
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	9a 8b       	std	Y+18, r25	; 0x12
    1f7c:	89 8b       	std	Y+17, r24	; 0x11
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	9a 89       	ldd	r25, Y+18	; 0x12
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <Send_DATA+0x1c4>
    1f86:	9a 8b       	std	Y+18, r25	; 0x12
    1f88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	9c 8b       	std	Y+20, r25	; 0x14
    1f92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <Send_DATA+0x1b8>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <Send_DATA+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
    1fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb6:	98 8b       	std	Y+16, r25	; 0x10
    1fb8:	8f 87       	std	Y+15, r24	; 0x0f
    1fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbc:	98 89       	ldd	r25, Y+16	; 0x10
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <Send_DATA+0x200>
    1fc2:	98 8b       	std	Y+16, r25	; 0x10
    1fc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay until Enable Start
	LCD_DATA_PORT = data; 			//Send data to data pins
    1fc6:	e5 e3       	ldi	r30, 0x35	; 53
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fcc:	80 83       	st	Z, r24
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
    1fd8:	9c 87       	std	Y+12, r25	; 0x0c
    1fda:	ad 87       	std	Y+13, r26	; 0x0d
    1fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	55 e4       	ldi	r21, 0x45	; 69
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	a9 87       	std	Y+9, r26	; 0x09
    1ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <Send_DATA+0x262>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	3f c0       	rjmp	.+126    	; 0x209e <Send_DATA+0x2e0>
	else if (__tmp > 65535)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <Send_DATA+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6b 85       	ldd	r22, Y+11	; 0x0b
    203a:	7c 85       	ldd	r23, Y+12	; 0x0c
    203c:	8d 85       	ldd	r24, Y+13	; 0x0d
    203e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <Send_DATA+0x2c2>
    2062:	80 e9       	ldi	r24, 0x90	; 144
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <Send_DATA+0x2b0>
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <Send_DATA+0x2a4>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <Send_DATA+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <Send_DATA+0x2ec>
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Disable LCD
    20b2:	a2 e3       	ldi	r26, 0x32	; 50
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e2 e3       	ldi	r30, 0x32	; 50
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8b 7f       	andi	r24, 0xFB	; 251
    20be:	8c 93       	st	X, r24
}
    20c0:	ab 96       	adiw	r28, 0x2b	; 43
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <Display_Str>:

void Display_Str (const u8 *str)	// Function to display string on LCD
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <Display_Str+0x6>
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9b 83       	std	Y+3, r25	; 0x03
    20e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    20e2:	19 82       	std	Y+1, r1	; 0x01
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <Display_Str+0x30>
	while (str[i] != '\0')
	{
		Send_DATA (str[i]);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	fc 01       	movw	r30, r24
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	80 81       	ld	r24, Z
    20f8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <Send_DATA>
		i++;
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	89 83       	std	Y+1, r24	; 0x01
}

void Display_Str (const u8 *str)	// Function to display string on LCD
{
	u8 i=0;
	while (str[i] != '\0')
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	fc 01       	movw	r30, r24
    210e:	e2 0f       	add	r30, r18
    2110:	f3 1f       	adc	r31, r19
    2112:	80 81       	ld	r24, Z
    2114:	88 23       	and	r24, r24
    2116:	39 f7       	brne	.-50     	; 0x20e6 <Display_Str+0x14>
	{
		Send_DATA (str[i]);
		i++;
	}
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <Go_To_Row_Col>:

void Go_To_Row_Col (u8 row, u8 col)  	// Function for moving to a specific column and row on LCD
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <Go_To_Row_Col+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <Go_To_Row_Col+0x8>
    212c:	0f 92       	push	r0
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch (row)
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3d 83       	std	Y+5, r19	; 0x05
    213e:	2c 83       	std	Y+4, r18	; 0x04
    2140:	8c 81       	ldd	r24, Y+4	; 0x04
    2142:	9d 81       	ldd	r25, Y+5	; 0x05
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	c1 f0       	breq	.+48     	; 0x217a <Go_To_Row_Col+0x56>
    214a:	2c 81       	ldd	r18, Y+4	; 0x04
    214c:	3d 81       	ldd	r19, Y+5	; 0x05
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	2c f4       	brge	.+10     	; 0x215e <Go_To_Row_Col+0x3a>
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	61 f0       	breq	.+24     	; 0x2174 <Go_To_Row_Col+0x50>
    215c:	19 c0       	rjmp	.+50     	; 0x2190 <Go_To_Row_Col+0x6c>
    215e:	2c 81       	ldd	r18, Y+4	; 0x04
    2160:	3d 81       	ldd	r19, Y+5	; 0x05
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	69 f0       	breq	.+26     	; 0x2182 <Go_To_Row_Col+0x5e>
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	91 05       	cpc	r25, r1
    2170:	61 f0       	breq	.+24     	; 0x218a <Go_To_Row_Col+0x66>
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <Go_To_Row_Col+0x6c>
	{
	case 0:
		Address = col;
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <Go_To_Row_Col+0x6c>
		break;
	case 1:
		Address = col + 0x40;
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	80 5c       	subi	r24, 0xC0	; 192
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <Go_To_Row_Col+0x6c>
		break;
	case 2:
		Address = col + 0x10;
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	80 5f       	subi	r24, 0xF0	; 240
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <Go_To_Row_Col+0x6c>
		break;
	case 3:
		Address = col + 0x50;
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	80 5b       	subi	r24, 0xB0	; 176
    218e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	Send_CMD (Address | SET_CURSOR_LOCATION); //To move cursor to specific Address location
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	80 68       	ori	r24, 0x80	; 128
    2194:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Send_CMD>
}
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_CLEAR>:

void LCD_CLEAR (void)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
	Send_CMD (CLEAR_COMMAND); //clearing the LCD
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Send_CMD>
}
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <Display_Str_Row_Col>:

void Display_Str_Row_Col (u8 row, u8 col, const u8 *str)	//Display string at specified row and column
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <Display_Str_Row_Col+0x6>
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <Display_Str_Row_Col+0x8>
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	6a 83       	std	Y+2, r22	; 0x02
    21cc:	5c 83       	std	Y+4, r21	; 0x04
    21ce:	4b 83       	std	Y+3, r20	; 0x03
	Go_To_Row_Col (row,col);
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	6a 81       	ldd	r22, Y+2	; 0x02
    21d4:	0e 94 92 10 	call	0x2124	; 0x2124 <Go_To_Row_Col>
	Display_Str (str);
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <Display_Str>
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <Integer_TO_String>:

void Integer_TO_String (u8 value)	  // Display an integer number on the screen
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	c5 56       	subi	r28, 0x65	; 101
    21f8:	d0 40       	sbci	r29, 0x00	; 0
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	fe 01       	movw	r30, r28
    2206:	eb 59       	subi	r30, 0x9B	; 155
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 83       	st	Z, r24
	u8 number_str[100];
	itoa (value, number_str, 10);    // convert integer number to character string
    220c:	fe 01       	movw	r30, r28
    220e:	eb 59       	subi	r30, 0x9B	; 155
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9e 01       	movw	r18, r28
    221a:	2f 5f       	subi	r18, 0xFF	; 255
    221c:	3f 4f       	sbci	r19, 0xFF	; 255
    221e:	b9 01       	movw	r22, r18
    2220:	4a e0       	ldi	r20, 0x0A	; 10
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	0e 94 a3 11 	call	0x2346	; 0x2346 <itoa>
	Display_Str (number_str);
    2228:	ce 01       	movw	r24, r28
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <Display_Str>
}
    2230:	cb 59       	subi	r28, 0x9B	; 155
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <main>:
#include <avr/io.h>
#include "../../MCAL/DIO/DIO.h"
#include "../../MCAL/UART/UART.h"
int main()
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	USART_Init();                    //initialization of USART
    224c:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_Init>
	Set_PinDir(PORT_B,Pin_0,OUTPUT); // set pin_0 of portB
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	0e 94 3a 07 	call	0xe74	; 0xe74 <Set_PinDir>
	Set_PinDir(PORT_B,Pin_1,OUTPUT); // set pin_1 of portB
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 3a 07 	call	0xe74	; 0xe74 <Set_PinDir>
	Set_GroupDir(PORT_C,0x0F);       // clearing the low bits of portc and setting the high bits
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	6f e0       	ldi	r22, 0x0F	; 15
    2268:	0e 94 aa 09 	call	0x1354	; 0x1354 <Set_GroupDir>
	while(1)
	{

		if(USART_receiveByte() == 'H')			// Alarm On
    226c:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
    2270:	88 34       	cpi	r24, 0x48	; 72
    2272:	59 f4       	brne	.+22     	; 0x228a <main+0x46>
		{
			Set_PinLevel(PORT_B,Pin_0,HIGH);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 36 08 	call	0x106c	; 0x106c <Set_PinLevel>
			Set_PinLevel(PORT_B,Pin_1,HIGH);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 36 08 	call	0x106c	; 0x106c <Set_PinLevel>
    2288:	19 c0       	rjmp	.+50     	; 0x22bc <main+0x78>
		}
		else if(USART_receiveByte() == 'F')		// Fan On
    228a:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
    228e:	86 34       	cpi	r24, 0x46	; 70
    2290:	59 f4       	brne	.+22     	; 0x22a8 <main+0x64>
		{
			Set_PinLevel(PORT_B,Pin_0,HIGH);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 36 08 	call	0x106c	; 0x106c <Set_PinLevel>
			Set_PinLevel(PORT_B,Pin_1,LOW);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 36 08 	call	0x106c	; 0x106c <Set_PinLevel>
    22a6:	0a c0       	rjmp	.+20     	; 0x22bc <main+0x78>
		}
		else
		{
			Set_PinLevel(PORT_B,Pin_0,LOW);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	0e 94 36 08 	call	0x106c	; 0x106c <Set_PinLevel>
			Set_PinLevel(PORT_B,Pin_1,LOW);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 36 08 	call	0x106c	; 0x106c <Set_PinLevel>
		}

		if(USART_receiveByte() == 'L')			// Led On
    22bc:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
    22c0:	8c 34       	cpi	r24, 0x4C	; 76
    22c2:	29 f4       	brne	.+10     	; 0x22ce <main+0x8a>
		{
			Set_GroupLevel(PORT_C,0x0F);
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	6f e0       	ldi	r22, 0x0F	; 15
    22c8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Set_GroupLevel>
    22cc:	cf cf       	rjmp	.-98     	; 0x226c <main+0x28>
		}
		else
		{
			Set_GroupLevel(PORT_C,0x00);
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Set_GroupLevel>
    22d6:	ca cf       	rjmp	.-108    	; 0x226c <main+0x28>

000022d8 <__prologue_saves__>:
    22d8:	2f 92       	push	r2
    22da:	3f 92       	push	r3
    22dc:	4f 92       	push	r4
    22de:	5f 92       	push	r5
    22e0:	6f 92       	push	r6
    22e2:	7f 92       	push	r7
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	ca 1b       	sub	r28, r26
    2302:	db 0b       	sbc	r29, r27
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	09 94       	ijmp

00002310 <__epilogue_restores__>:
    2310:	2a 88       	ldd	r2, Y+18	; 0x12
    2312:	39 88       	ldd	r3, Y+17	; 0x11
    2314:	48 88       	ldd	r4, Y+16	; 0x10
    2316:	5f 84       	ldd	r5, Y+15	; 0x0f
    2318:	6e 84       	ldd	r6, Y+14	; 0x0e
    231a:	7d 84       	ldd	r7, Y+13	; 0x0d
    231c:	8c 84       	ldd	r8, Y+12	; 0x0c
    231e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2320:	aa 84       	ldd	r10, Y+10	; 0x0a
    2322:	b9 84       	ldd	r11, Y+9	; 0x09
    2324:	c8 84       	ldd	r12, Y+8	; 0x08
    2326:	df 80       	ldd	r13, Y+7	; 0x07
    2328:	ee 80       	ldd	r14, Y+6	; 0x06
    232a:	fd 80       	ldd	r15, Y+5	; 0x05
    232c:	0c 81       	ldd	r16, Y+4	; 0x04
    232e:	1b 81       	ldd	r17, Y+3	; 0x03
    2330:	aa 81       	ldd	r26, Y+2	; 0x02
    2332:	b9 81       	ldd	r27, Y+1	; 0x01
    2334:	ce 0f       	add	r28, r30
    2336:	d1 1d       	adc	r29, r1
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	ed 01       	movw	r28, r26
    2344:	08 95       	ret

00002346 <itoa>:
    2346:	fb 01       	movw	r30, r22
    2348:	9f 01       	movw	r18, r30
    234a:	e8 94       	clt
    234c:	42 30       	cpi	r20, 0x02	; 2
    234e:	c4 f0       	brlt	.+48     	; 0x2380 <itoa+0x3a>
    2350:	45 32       	cpi	r20, 0x25	; 37
    2352:	b4 f4       	brge	.+44     	; 0x2380 <itoa+0x3a>
    2354:	4a 30       	cpi	r20, 0x0A	; 10
    2356:	29 f4       	brne	.+10     	; 0x2362 <itoa+0x1c>
    2358:	97 fb       	bst	r25, 7
    235a:	1e f4       	brtc	.+6      	; 0x2362 <itoa+0x1c>
    235c:	90 95       	com	r25
    235e:	81 95       	neg	r24
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	64 2f       	mov	r22, r20
    2364:	77 27       	eor	r23, r23
    2366:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__udivmodhi4>
    236a:	80 5d       	subi	r24, 0xD0	; 208
    236c:	8a 33       	cpi	r24, 0x3A	; 58
    236e:	0c f0       	brlt	.+2      	; 0x2372 <itoa+0x2c>
    2370:	89 5d       	subi	r24, 0xD9	; 217
    2372:	81 93       	st	Z+, r24
    2374:	cb 01       	movw	r24, r22
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	a1 f7       	brne	.-24     	; 0x2362 <itoa+0x1c>
    237a:	16 f4       	brtc	.+4      	; 0x2380 <itoa+0x3a>
    237c:	5d e2       	ldi	r21, 0x2D	; 45
    237e:	51 93       	st	Z+, r21
    2380:	10 82       	st	Z, r1
    2382:	c9 01       	movw	r24, r18
    2384:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <strrev>

00002388 <strrev>:
    2388:	dc 01       	movw	r26, r24
    238a:	fc 01       	movw	r30, r24
    238c:	67 2f       	mov	r22, r23
    238e:	71 91       	ld	r23, Z+
    2390:	77 23       	and	r23, r23
    2392:	e1 f7       	brne	.-8      	; 0x238c <strrev+0x4>
    2394:	32 97       	sbiw	r30, 0x02	; 2
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <strrev+0x18>
    2398:	7c 91       	ld	r23, X
    239a:	6d 93       	st	X+, r22
    239c:	70 83       	st	Z, r23
    239e:	62 91       	ld	r22, -Z
    23a0:	ae 17       	cp	r26, r30
    23a2:	bf 07       	cpc	r27, r31
    23a4:	c8 f3       	brcs	.-14     	; 0x2398 <strrev+0x10>
    23a6:	08 95       	ret

000023a8 <__udivmodhi4>:
    23a8:	aa 1b       	sub	r26, r26
    23aa:	bb 1b       	sub	r27, r27
    23ac:	51 e1       	ldi	r21, 0x11	; 17
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <__udivmodhi4_ep>

000023b0 <__udivmodhi4_loop>:
    23b0:	aa 1f       	adc	r26, r26
    23b2:	bb 1f       	adc	r27, r27
    23b4:	a6 17       	cp	r26, r22
    23b6:	b7 07       	cpc	r27, r23
    23b8:	10 f0       	brcs	.+4      	; 0x23be <__udivmodhi4_ep>
    23ba:	a6 1b       	sub	r26, r22
    23bc:	b7 0b       	sbc	r27, r23

000023be <__udivmodhi4_ep>:
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	5a 95       	dec	r21
    23c4:	a9 f7       	brne	.-22     	; 0x23b0 <__udivmodhi4_loop>
    23c6:	80 95       	com	r24
    23c8:	90 95       	com	r25
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	08 95       	ret

000023d0 <_exit>:
    23d0:	f8 94       	cli

000023d2 <__stop_program>:
    23d2:	ff cf       	rjmp	.-2      	; 0x23d2 <__stop_program>
